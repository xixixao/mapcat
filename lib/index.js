// Generated by CoffeeScript 1.10.0
var SourceMapConsumer, SourceMapGenerator, path, readFileSync, ref, ref1, writeFileSync;

ref = require('fs'), readFileSync = ref.readFileSync, writeFileSync = ref.writeFileSync;

path = require('path');

ref1 = require('source-map'), SourceMapConsumer = ref1.SourceMapConsumer, SourceMapGenerator = ref1.SourceMapGenerator;

exports.cat = function(inputMapFiles, outJSFile, outMapFile, maproot, wrapper) {
  var buffer, f, generator, i, len, lineOffset, map, src, srcPath;
  buffer = wrapper ? ['(function() {'] : [];
  generator = new SourceMapGenerator({
    file: outJSFile
  });
  lineOffset = wrapper ? 1 : 0;
  for (i = 0, len = inputMapFiles.length; i < len; i++) {
    f = inputMapFiles[i];
    map = new SourceMapConsumer(readFileSync(f, 'utf-8'));
    srcPath = path.join(path.dirname(f), map.file);
    src = readFileSync(srcPath, 'utf-8');
    src = src.replace(/\/\/[@#]\ssourceMappingURL[^\r\n]*/g, '//');
    buffer.push(src);
    map.eachMapping(function(mapping) {
      var origSrc;
      origSrc = path.join(path.dirname(f), mapping.source);
      mapping = {
        generated: {
          line: mapping.generatedLine + lineOffset,
          column: mapping.generatedColumn
        },
        original: {
          line: mapping.originalLine,
          column: mapping.originalColumn
        },
        source: path.relative(path.dirname(outMapFile), origSrc)
      };
      return generator.addMapping(mapping);
    });
    lineOffset += src.split('\n').length;
  }
  if (wrapper) {
    buffer.push('}).call(this);');
  }
  if (maproot === null) {
    buffer.push("//# sourceMappingURL=" + (path.relative(path.dirname(outJSFile), outMapFile)));
  } else {
    buffer.push("//# sourceMappingURL=" + (maproot + path.relative(path.dirname(outJSFile), outMapFile)));
  }
  writeFileSync(outJSFile, buffer.join('\n'), 'utf-8');
  return writeFileSync(outMapFile, generator.toString(), 'utf-8');
};
